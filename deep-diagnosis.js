// –ì–ª—É–±–æ–∫–∏–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏
console.log('[DEEP-DIAGNOSIS] –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª—É–±–æ–∫–∏–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç');

function deepDiagnosis() {
  console.log('[DEEP-DIAGNOSIS] === –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –õ–û–ì–ò–ö–ò –ò–ì–†–´ ===');
  
  // 1. –ò—â–µ–º –∫–Ω–æ–ø–∫—É
  const button = document.querySelector('[data-track="bet_1.place"]');
  if (!button) {
    console.log('[DEEP-DIAGNOSIS] ‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return;
  }
  
  console.log('[DEEP-DIAGNOSIS] ‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', button);
  
  // 2. –ò—â–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏–≥—Ä—ã
  console.log('[DEEP-DIAGNOSIS] === –ü–û–ò–°–ö –û–ë–™–ï–ö–¢–û–í –ò–ì–†–´ ===');
  const gameObjects = [];
  
  for (let key in window) {
    if (window[key] && typeof window[key] === 'object') {
      const obj = window[key];
      const gameMethods = ['placeBet', 'createGame', 'retrieveGame', 'cashout', 'setGameStarted', 'setRoundId'];
      const gameProperties = ['gameStarted', 'roundId', 'clientSeed', 'nonce', 'amount', 'lockedButtons'];
      
      const hasGameMethods = gameMethods.some(method => obj[method] && typeof obj[method] === 'function');
      const hasGameProperties = gameProperties.some(prop => obj[prop] !== undefined);
      
      if (hasGameMethods || hasGameProperties) {
        gameObjects.push({
          name: key,
          methods: gameMethods.filter(method => obj[method] && typeof obj[method] === 'function'),
          properties: gameProperties.filter(prop => obj[prop] !== undefined).reduce((acc, prop) => {
            acc[prop] = obj[prop];
            return acc;
          }, {})
        });
      }
    }
  }
  
  console.log('[DEEP-DIAGNOSIS] –ù–∞–π–¥–µ–Ω—ã –æ–±—ä–µ–∫—Ç—ã –∏–≥—Ä—ã:', gameObjects);
  
  // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã
  gameObjects.forEach((gameObj, index) => {
    console.log(`[DEEP-DIAGNOSIS] === –û–ë–™–ï–ö–¢ –ò–ì–†–´ ${index + 1}: ${gameObj.name} ===`);
    console.log('[DEEP-DIAGNOSIS] –ú–µ—Ç–æ–¥—ã:', gameObj.methods);
    console.log('[DEEP-DIAGNOSIS] –°–≤–æ–π—Å—Ç–≤–∞:', gameObj.properties);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    const obj = window[gameObj.name];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º lockedButtons
    if (obj.lockedButtons !== undefined) {
      console.log('[DEEP-DIAGNOSIS] lockedButtons:', obj.lockedButtons);
      
      // –ï—Å–ª–∏ —ç—Ç–æ getter, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–Ω—è—Ç—å –ª–æ–≥–∏–∫—É
      try {
        const descriptor = Object.getOwnPropertyDescriptor(obj, 'lockedButtons');
        if (descriptor && descriptor.get) {
          console.log('[DEEP-DIAGNOSIS] lockedButtons - —ç—Ç–æ getter, –ª–æ–≥–∏–∫–∞:', descriptor.get.toString());
        }
      } catch (e) {
        console.log('[DEEP-DIAGNOSIS] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å descriptor –¥–ª—è lockedButtons');
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º gameStarted
    if (obj.gameStarted !== undefined) {
      console.log('[DEEP-DIAGNOSIS] gameStarted:', obj.gameStarted);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º roundId
    if (obj.roundId !== undefined) {
      console.log('[DEEP-DIAGNOSIS] roundId:', obj.roundId);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º token
    if (obj.token !== undefined) {
      console.log('[DEEP-DIAGNOSIS] token:', obj.token ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º isOnline
    if (obj.isOnline !== undefined) {
      console.log('[DEEP-DIAGNOSIS] isOnline:', obj.isOnline);
    }
  });
  
  // 4. –ò—â–µ–º –ª–æ–≥–∏–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ–¥–µ
  console.log('[DEEP-DIAGNOSIS] === –ü–û–ò–°–ö –õ–û–ì–ò–ö–ò –ê–ö–¢–ò–í–ê–¶–ò–ò –ö–ù–û–ü–ö–ò ===');
  
  // –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
  const activationFunctions = [];
  for (let key in window) {
    if (window[key] && typeof window[key] === 'function') {
      const func = window[key];
      const funcStr = func.toString();
      if (funcStr.includes('_disabled') || funcStr.includes('lockedButtons') || funcStr.includes('gameStarted')) {
        activationFunctions.push({
          name: key,
          function: func
        });
      }
    }
  }
  
  console.log('[DEEP-DIAGNOSIS] –ù–∞–π–¥–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', activationFunctions.map(f => f.name));
  
  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∑–∞–ø—Ä–æ—Å—ã
  console.log('[DEEP-DIAGNOSIS] === –ü–†–û–í–ï–†–ö–ê API –ó–ê–ü–†–û–°–û–í ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ API –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  const requiredAPIs = [
    '/api/common/profile',
    '/api/common/settings', 
    '/api/games/settings',
    '/api/games/create',
    '/api/games/retrieve'
  ];
  
  requiredAPIs.forEach(api => {
    console.log(`[DEEP-DIAGNOSIS] –ü—Ä–æ–≤–µ—Ä—è–µ–º API: ${api}`);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å
  });
  
  // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  console.log('[DEEP-DIAGNOSIS] === –ü–†–û–í–ï–†–ö–ê WEBSOCKET ===');
  
  // –ò—â–µ–º WebSocket –æ–±—ä–µ–∫—Ç—ã
  for (let key in window) {
    if (window[key] && window[key].constructor && window[key].constructor.name === 'WebSocket') {
      console.log(`[DEEP-DIAGNOSIS] WebSocket –Ω–∞–π–¥–µ–Ω: ${key}`, {
        readyState: window[key].readyState,
        url: window[key].url
      });
    }
  }
  
  // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  console.log('[DEEP-DIAGNOSIS] === –°–û–°–¢–û–Ø–ù–ò–ï –ö–ù–û–ü–ö–ò –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò ===');
  
  const checkButtonState = () => {
    const currentButton = document.querySelector('[data-track="bet_1.place"]');
    if (currentButton) {
      console.log('[DEEP-DIAGNOSIS] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏:', {
        classes: currentButton.className,
        disabled: currentButton.disabled,
        pointerEvents: getComputedStyle(currentButton).pointerEvents,
        opacity: getComputedStyle(currentButton).opacity,
        cursor: getComputedStyle(currentButton).cursor
      });
    }
  };
  
  checkButtonState();
  
  // 8. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏
  const buttonObserver = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
        console.log('[DEEP-DIAGNOSIS] üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∫–Ω–æ–ø–∫–∏:', {
          oldValue: mutation.oldValue,
          newValue: mutation.target.className
        });
        checkButtonState();
      }
    });
  });
  
  buttonObserver.observe(button, {
    attributes: true,
    attributeFilter: ['class', 'disabled']
  });
  
  // 9. –ò—â–µ–º —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –∫–æ–¥–µ
  console.log('[DEEP-DIAGNOSIS] === –ü–û–ò–°–ö –£–°–õ–û–í–ò–ô –ê–ö–¢–ò–í–ê–¶–ò–ò –í –ö–û–î–ï ===');
  
  // –ò—â–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  const activationConditions = [];
  for (let key in window) {
    if (window[key] && typeof window[key] === 'object') {
      const obj = window[key];
      if (obj.lockedButtons !== undefined || obj.gameStarted !== undefined) {
        activationConditions.push({
          name: key,
          lockedButtons: obj.lockedButtons,
          gameStarted: obj.gameStarted,
          roundId: obj.roundId,
          token: obj.token ? '–ï—Å—Ç—å' : '–ù–µ—Ç',
          isOnline: obj.isOnline
        });
      }
    }
  }
  
  console.log('[DEEP-DIAGNOSIS] –£—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', activationConditions);
  
  // 10. –í—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('[DEEP-DIAGNOSIS] === –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===');
  
  const recommendations = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
  const mainGameObj = gameObjects.find(obj => obj.methods.includes('placeBet'));
  if (mainGameObj) {
    const obj = window[mainGameObj.name];
    
    if (obj.lockedButtons === true) {
      recommendations.push('‚ùå lockedButtons = true - –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å false');
    }
    
    if (obj.gameStarted === false) {
      recommendations.push('‚ùå gameStarted = false - –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å true');
    }
    
    if (!obj.roundId) {
      recommendations.push('‚ùå roundId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å');
    }
    
    if (!obj.token) {
      recommendations.push('‚ùå token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å');
    }
    
    if (obj.isOnline === false) {
      recommendations.push('‚ùå isOnline = false - –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å true');
    }
  }
  
  if (recommendations.length === 0) {
    recommendations.push('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
  }
  
  console.log('[DEEP-DIAGNOSIS] –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', recommendations);
  
  console.log('[DEEP-DIAGNOSIS] === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  
  return {
    gameObjects,
    activationConditions,
    recommendations
  };
}

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
window.deepDiagnosis = deepDiagnosis;

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('load', () => {
  console.log('[DEEP-DIAGNOSIS] –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
  
  setTimeout(() => {
    deepDiagnosis();
  }, 5000);
});

console.log('[DEEP-DIAGNOSIS] –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ deepDiagnosis() –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
