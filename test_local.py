#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Vortex
"""

import requests
import json
import time
import sys

def test_server():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ API endpoints –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    
    base_url = "http://localhost:8000"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Vortex...")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
    tests = [
        {
            "name": "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",
            "method": "GET",
            "url": f"{base_url}/",
            "expected_status": 200
        },
        {
            "name": "–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "method": "POST",
            "url": f"{base_url}/api/common/profile",
            "expected_status": 200
        },
        {
            "name": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã",
            "method": "GET",
            "url": f"{base_url}/api/common/settings",
            "expected_status": 200
        },
        {
            "name": "–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã",
            "method": "POST",
            "url": f"{base_url}/api/games/create",
            "expected_status": 200
        },
        {
            "name": "–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏",
            "method": "POST",
            "url": f"{base_url}/api/bets/place",
            "data": {"amount": 100, "roundId": "test-round"},
            "expected_status": 200
        },
        {
            "name": "–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä",
            "method": "GET",
            "url": f"{base_url}/api/games/history",
            "expected_status": 200
        },
        {
            "name": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞",
            "method": "POST",
            "url": f"{base_url}/api/player/statistics",
            "expected_status": 200
        },
        {
            "name": "–õ–∏–º–∏—Ç—ã —Å—Ç–∞–≤–æ–∫",
            "method": "GET",
            "url": f"{base_url}/api/limits",
            "expected_status": 200
        },
        {
            "name": "–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç",
            "method": "GET",
            "url": f"{base_url}/api/rates",
            "expected_status": 200
        },
        {
            "name": "–ü–µ—Ä–µ–≤–æ–¥—ã",
            "method": "GET",
            "url": f"{base_url}/api/translates/test/latest/en",
            "expected_status": 200
        }
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            print(f"üîç –¢–µ—Å—Ç: {test['name']}")
            
            if test['method'] == 'GET':
                response = requests.get(test['url'], timeout=5)
            elif test['method'] == 'POST':
                data = test.get('data', {})
                response = requests.post(test['url'], json=data, timeout=5)
            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {test['method']}")
                failed += 1
                continue
            
            if response.status_code == test['expected_status']:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
                passed += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–æ–≤
                if test['method'] == 'POST' and response.headers.get('content-type', '').startswith('application/json'):
                    try:
                        data = response.json()
                        if 'payload' in data:
                            print(f"   üì¶ –î–∞–Ω–Ω—ã–µ: {json.dumps(data['payload'], ensure_ascii=False, indent=2)[:100]}...")
                    except:
                        pass
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–ª—Å—è: {test['expected_status']}, –ø–æ–ª—É—á–µ–Ω: {response.status_code})")
                failed += 1
                
        except requests.exceptions.ConnectionError:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            failed += 1
        except requests.exceptions.Timeout:
            print(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
            failed += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            failed += 1
        
        print()
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {failed}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
    
    if failed == 0:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {failed} –æ—à–∏–±–æ–∫")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        return False

def test_external_blocking():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    print("\nüõ°Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
    print("=" * 50)
    
    external_urls = [
        "https://google.com",
        "https://cloudflare.com",
        "http://example.com"
    ]
    
    for url in external_urls:
        try:
            response = requests.get(url, timeout=3)
            print(f"‚ùå –í–Ω–µ—à–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∫ {url} –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (—Å—Ç–∞—Ç—É—Å: {response.status_code})")
        except requests.exceptions.ConnectionError:
            print(f"‚úÖ –í–Ω–µ—à–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∫ {url} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
        except requests.exceptions.Timeout:
            print(f"‚úÖ –í–Ω–µ—à–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∫ {url} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (—Ç–∞–π–º–∞—É—Ç)")
        except Exception as e:
            print(f"‚úÖ –í–Ω–µ—à–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∫ {url} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ({e})")

if __name__ == "__main__":
    print("üéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Vortex")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    try:
        response = requests.get("http://localhost:8000", timeout=2)
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python app.py")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    success = test_server()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    test_external_blocking()
    
    print("\n" + "=" * 50)
    if success:
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    else:
        print("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    
    print("\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README_LOCAL.md")
